# GitLab CI pipeline for building the 'api' service using Docker Compose in workshop/demo-secure-code

stages:
  - build
  - dependency-check
  - scan-code
  - security

build-api:
  stage: build
  script:
    - cd workshop/demo-secure-code
    - docker compose build api
  only:
    - main

# Dependency check with OWASP Dependency-Check
dependency_check:
  stage: dependency-check
  script:
    - cd workshop/demo-secure-code/
    - dotnet tool install --global CycloneDX
    - mkdir -p sbom
    - dotnet CycloneDX demo-secure-code.sln -o ./sbom --filename bom.json
    - >
      curl -X "POST" "http://146.190.110.248:8081/api/v1/bom"
      -H 'Content-Type: multipart/form-data'
      -H "X-Api-Key: ${CI_TRACKING_KEY}"
      -F "autoCreate=false"
      -F "projectName=api-dotnet"
      -F "bom=@./sbom/bom.json"
  
# Scan code with sonar-scanner for .net projects in folder workshop/demo-secure-code
sonar_scan:
  stage: scan-code
  script:
    - cd workshop/demo-secure-code/api
    - dotnet tool install --global dotnet-sonarscanner
    - dotnet sonarscanner begin /k:"demo" /d:sonar.host.url="http://152.42.185.15:9000"  /d:sonar.token=${CI_SONAR_TOKEN}
    - dotnet build
    - dotnet sonarscanner end /d:sonar.token=${CI_SONAR_TOKEN}
  only:
    - main

# Scan code with Gitleaks
gitleaks_scan:
  stage: security
  script:
    - docker run -v $(pwd):/src zricethezav/gitleaks detect --source=/src --config=/src/gitleaks.toml --verbose --exit-code=1 # Scan the current repository, use a config file, and exit with an error code if leaks are found
  allow_failure: false # Prevent the pipeline from passing if leaks are found

# Scan docker image with Trivy
trivy_scan:
  stage: security
  script:
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL workshop_demo-secure
