{
	"info": {
		"_postman_id": "16a788a8-41bb-4e71-96ec-f049faf5aa38",
		"name": "api-test-secure",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "1453931",
		"_collection_link": "https://red-firefly-245852.postman.co/workspace/msa202509~e9f829cb-396c-4b90-b61e-59ae9bcb3bad/collection/1453931-16a788a8-41bb-4e71-96ec-f049faf5aa38?action=share&source=collection_link&creator=1453931"
	},
	"item": [
		{
			"name": "Get token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"LOGIN_TOKEN\", jsonData.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/api/token"
			},
			"response": []
		},
		{
			"name": "Create a new order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create s new order :: Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Create s new order :: Response matches JSON schema\", function () {",
							"    const schema = {",
							"        type: \"object\",",
							"        properties: {",
							"            id: { type: \"integer\" },",
							"            userId: { type: \"integer\" },",
							"            orderItems: {",
							"                type: \"array\",",
							"                items: {",
							"                    type: \"object\",",
							"                    properties: {",
							"                        productId: { type: \"integer\" },",
							"                        quantity: { type: \"integer\" },",
							"                        pricePerItem: { type: \"number\" }",
							"                    },",
							"                    required: [\"productId\", \"quantity\", \"pricePerItem\"]",
							"                }",
							"            },",
							"            totalAmount: { type: \"number\" },",
							"            status: { type: \"string\" },",
							"            createdAt: { type: \"string\", format: \"date-time\" }",
							"        },",
							"        required: [\"id\", \"userId\", \"orderItems\", \"totalAmount\", \"status\", \"createdAt\"]",
							"    };",
							"",
							"    const validate = require('ajv')().compile(schema);",
							"    const valid = validate(response);",
							"    pm.expect(valid, validate.errors).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{LOGIN_TOKEN}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"orderItems\": [\n        {\n            \"productId\": 1,\n            \"quantity\": 1,\n            \"pricePerItem\": 100\n        }\n    ],\n    \"totalAmount\": 0.01, // They set their own price\n    \"status\": \"Shipped\", // They mark it as shipped immediately\n    \"createdAt\": \"2099-01-01T00:00:00Z\" // They manipulate the date\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/secure/orders"
			},
			"response": []
		},
		{
			"name": "Get order by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get order by id :: Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"const schema = {",
							"    type: \"object\",",
							"    properties: {",
							"        id: { type: \"integer\" },",
							"        userId: { type: \"integer\" },",
							"        orderItems: {",
							"            type: \"array\",",
							"            items: {",
							"                type: \"object\",",
							"                properties: {",
							"                    productId: { type: \"integer\" },",
							"                    quantity: { type: \"integer\" },",
							"                    pricePerItem: { type: \"number\" }",
							"                },",
							"                required: [\"productId\", \"quantity\", \"pricePerItem\"]",
							"            }",
							"        },",
							"        totalAmount: { type: \"number\" },",
							"        status: { type: \"string\" },",
							"        createdAt: { type: \"string\", format: \"date-time\" }",
							"    },",
							"    required: [\"id\", \"userId\", \"orderItems\", \"totalAmount\", \"status\", \"createdAt\"]",
							"};",
							"",
							"pm.test(\"Get order by id :: Validate response JSON schema\", function () {",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{LOGIN_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/api/secure/orders/1"
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get all order :: Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{LOGIN_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/api/secure/orders"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "LOGIN_TOKEN",
			"value": ""
		}
	]
}